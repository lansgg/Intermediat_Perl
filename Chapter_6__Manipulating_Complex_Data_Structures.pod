=encoding utf8

=head2 Chapter 6. 处理复杂数据结构 

既然你已经知道了引用的基础知识, 那就让我们管理复杂数据结构的其它的方法。 首先, 我们会用测试工具来查看复杂数据结构的内容, 之后我们会介绍 I<Data::Dumper> 模块, 这样我们就可以在程序中展示数据结构了。 下一步, 我们将会学到用 I<Storable> 模块把复杂数据结构方便快捷地进行存取.最后, 我们会回顾一下 I<grep> 和 I<map> , 看他们如何在处理复杂数据结构上来发挥作用。  

=head2 6. 1. 使用测试工作来查看复杂数据结构 

I<Perl> 的测试工具可以方便地显示复杂的数据结构.例如, 让我们单步执行第五章中我们说过的那个字节计数的程序： 


 my %total_bytes; 
  while (<>) { 
   my ($source, $destination, $bytes) = split; 
   $total_bytes{$source}{$destination} += $bytes; 
  } 
  for my $source (sort keys %total_bytes) { 
   for my $destination (sort keys %{ $total_bytes{$source} }) { 
     print "$source => $destination:",  
      " $total_bytes{$source}{$destination} bytes\n"; 
   } 
   print "\n"; 
  } 

下面是我们要测试的数据： 


 professor. hut gilligan. crew. hut 1250 
 professor. hut lovey. howell. hut 910 
 thurston. howell. hut lovey. howell. hut 1250 
 professor. hut lovey. howell. hut 450 
 ginger. girl. hut professor. hut 1218 
 ginger. girl. hut maryann. girl. hut 199 

我们可以有多种方法来执行测试.其中一种最简单的是以 I<-d> 开关在命令行执行 I<Perl> 解释器： 


 myhost% perl -d bytecounts bytecounts-in 


 Loading DB routines from perl5db. pl version 1. 19 
 Editor support available.  


 Enter h or 'h h' for help, or 'man perldebug' for more help.  


 main::(bytecounts:2):        my %total_bytes; 
  DB<1> s 
 main::(bytecounts:3):        while (<>) { 
  DB<1> s 
 main::(bytecounts:4):          my ($source, $destination, $bytes) = split; 
  DB<1> s 
 main::(bytecounts:5):          $total_bytes{$source}{$destination} += $bytes; 
  DB<1> x $source, $destination, $bytes 
 0  'professor. hut' 
 1  'gilligan. crew. hut' 
 2  1250 

如果在你这儿运行的话, 要注意因为测试工具的版本不同, 所以你的屏幕显示可能与我们的不尽相同.还有, 如果你在测试中遇到了麻烦, 可以输入h键来获得 I<perldoc> I<perldebug> 提供的在线帮助。  

测试工具会在程序的每一行被执行之前, 显示该语句.这个意思就是说, 在此时, 我们将会调用一个自生成, 建立我们的索引键 I<.'s'> 表示单步执行, 而 I<'x'> 表示以适当的格式输出值的列表.这样我们就可以看到 I<$source> , I<$destination> 和 I<$bytes> 这些变量是正确的, 且现在正更新数据： update the data: 


 DB<2> s 
   main::(bytecounts:3):        while (<>) { 

我们已经通过自生成建立了散列条目.让我们看看我们得到了什么： 


 DB<2> x \%total_bytes 
    0  HASH(0x132dc) 
  'professor. hut' => HASH(0x37a34) 
     'gilligan. crew. hut' => 1250 

当我们给调试命令x 一个散列引用的时候, 它会把这个散列的所有内容（键／值对）打印出来.如果其中的值也是指向散列的引用的话, 它同样也会打印, 以此类推.我们可以看到散列 I<%total_bytes> 中 I<professor.hut> 键相对应的值是指向另一个散列的引用.就像你预期的那样, 这个散列引用内中有单个键： I<gilligan.crew.hut> , 其对应的值为 I<1250.>  

我们看看下一个赋值会发生什么： 


 DB<3> s 
  main::(bytecounts:4):          my ($source, $destination, $bytes) = split; 
 DB<3> s 
  main::(bytecounts:5):          $total_bytes{$source}{$destination} += $bytes; 
 DB<3> x $source, $destination, $bytes 
  0  'professor. hut' 
  1  'lovey. howell. hut' 
  2  910 
 DB<4> s 
  main::(bytecounts:3):        while (<>) { 
 DB<4> x \%total_bytes 
  0  HASH(0x132dc) 
 'professor. hut' => HASH(0x37a34) 
    'gilligan. crew. hut' => 1250 
    'lovey. howell. hut' => 910 

现在我们已经把从 I<professor.hut> 流向 I<lovey.howell.hut> 主机的字节数加上了.顶层的散列没有变化, 而下一级的散列已加上了新的条目.让我们继续： 


 DB<5> s 
  main::(bytecounts:4):          my ($source, $destination, $bytes) = split; 
 DB<6> s 
  main::(bytecounts:5):          $total_bytes{$source}{$destination} += $bytes; 
 DB<6> x $source, $destination, $bytes 
  0  'thurston. howell. hut' 
  1  'lovey. howell. hut' 
  2  1250 
 DB<7> s 
  main::(bytecounts:3):        while (<>) { 
 DB<7> x \%total_bytes 
  0  HASH(0x132dc) 
 'professor. hut' => HASH(0x37a34) 
    'gilligan. crew. hut' => 1250 
    'lovey. howell. hut' => 910 
 'thurston. howell. hut' => HASH(0x2f9538) 
    'lovey. howell. hut' => 1250 

哈, 有趣的事发生了.顶层散列的一个键： I<thurston.howell.hut> 添加了一个新的条目, 于是一个新的散列引用自生成为一个空的散列。 在空散列被加好之后, 马上一个新的键/值对被加上, 标示 I<1250> 字节从 I<thurston.howell.hut> 传到 I<lovey.howell.hut.> 让我们单步执行, 查看一下： 


 DB<8> s 
  main::(bytecounts:4):          my ($source, $destination, $bytes) = split; 
 DB<8> s 
  main::(bytecounts:5):          $total_bytes{$source}{$destination} += $bytes; 
 DB<8> x $source, $destination, $bytes 
  0  'professor. hut' 
  1  'lovey. howell. hut' 
  2  450 
 DB<9> s 
  main::(bytecounts:3):        while (<>) { 
 DB<9> x \%total_bytes 
  0  HASH(0x132dc) 
 'professor. hut' => HASH(0x37a34) 
    'gilligan. crew. hut' => 1250 
    'lovey. howell. hut' => 1360 
 'thurston. howell. hut' => HASH(0x2f9538) 
    'lovey. howell. hut' => 1250 

现在我们添加更多的字节从 I<professor.hut> 到 I<lovey.howell.hut> , 我们用现存的值.这儿没有什么新鲜的, 让我们继续： 


 DB<10> s 
  main::(bytecounts:4):          my ($source, $destination, $bytes) = split; 
 DB<10> s 
  main::(bytecounts:5):          $total_bytes{$source}{$destination} += $bytes; 
 DB<10> x $source, $destination, $bytes 
  0  'ginger. girl. hut' 
  1  'professor. hut' 
  2  1218 
 DB<11> s 
  main::(bytecounts:3):        while (<>) { 
 DB<11> x \%total_bytes 
  0  HASH(0x132dc) 
 'ginger. girl. hut' => HASH(0x297474) 
    'professor. hut' => 1218 
 'professor. hut' => HASH(0x37a34) 
    'gilligan. crew. hut' => 1250 
    'lovey. howell. hut' => 1360 
 'thurston. howell. hut' => HASH(0x2f9538) 
    'lovey. howell. hut' => 1250 

这次, 我们添加了个新的源主机, I<ginger.girl.hut.> 注意顶层散列现在有三个元素了, 每个元素有一个不同的散列引用.好, 我们继续： 


 DB<12> s 
  main::(bytecounts:4):          my ($source, $destination, $bytes) = split; 
 DB<12> s 
  main::(bytecounts:5):          $total_bytes{$source}{$destination} += $bytes; 
 DB<12> x $source, $destination, $bytes 
  0  'ginger. girl. hut' 
  1  'maryann. girl. hut' 
  2  199 
 DB<13> s 
  main::(bytecounts:3):        while (<>) { 
 DB<13> x \%total_bytes 
  0  HASH(0x132dc) 
 'ginger. girl. hut' => HASH(0x297474) 
    'maryann. girl. hut' => 199 
    'professor. hut' => 1218 
 'professor. hut' => HASH(0x37a34) 
    'gilligan. crew. hut' => 1250 
    'lovey. howell. hut' => 1360 
 'thurston. howell. hut' => HASH(0x2f9538) 
    'lovey. howell. hut' => 1250 

现在我们已经给源发于 I<ginger.girl.hut.> 的主机加了两个目标主机在散列中了.因为这是数据的最后一行(这次运行中), 单步执行带我们到更底的那一层： 


 DB<14> s 
  main::(bytecounts:8):        for my $source (sort keys %total_bytes) { 

尽这我们不能直接从括号内部验核列表值, 但我们可以显示它： 


 DB<14> x sort keys %total_bytes 
    0  'ginger. girl. hut' 
    1  'professor. hut' 
    2  'thurston. howell. hut' 

这是 I<foreach> 语句扫描的清单.这些是所有特定日志文件中传输字节的所有源主机.下面是当我们单步执行到里层循环时发生的事情： 


 DB<15> s 
    main::(bytecounts:9):     for my $destination (sort keys %{ $total_bytes{$source} }) { 

当下, 我们可以由内而外精确地确定括号里的清单的值 得出的结果是什么值.我们往下看： 


 DB<15> x $source 
  0  'ginger. girl. hut' 
 DB<16> x $total_bytes{$source} 
  0  HASH(0x297474) 
 'maryann. girl. hut' => 199 
 'professor. hut' => 1218 
 DB<18> x keys %{ $total_bytes{$source } } 
  0  'maryann. girl. hut' 
  1  'professor. hut' 
 DB<19> x sort keys %{ $total_bytes{$source } } 
  0  'maryann. girl. hut' 
  1  'professor. hut' 

注意, 打印 I<$total_bytes{$source}> 显示它是一个散列引用.这样, I<sort> 看上去好像什么都没做, 输出的键不必以排序输出.下一步是找数据： 


 DB<20> s 
  main::(bytecounts:10):            print "$source => $destination:",  
  main::(bytecounts:11):              " $total_bytes{$source}{$destination} bytes\n"; 
 DB<20> x $source, $destination 
  0  'ginger. girl. hut' 
  1  'maryann. girl. hut' 
 DB<21> x $total_bytes{$source}{$destination} 
  0  199 

当我们用测试工具看到的, 我们可以方便地查验数据, 甚至是结构化的数据, 来帮助我们理解我们的程序。  

=head2 6. 2. 用 I<Data::Dumper> 模块查看复杂数据 

另外一个我们可以快速查看复杂数据结构的方法是用 I<dump> 模块打印出来.这个特别好用的 I<dump> 模块已被收纳在 I<Perl> 的核心发布中, 唤作： I<Data::Dumper.> 让我们改写前面那个字节计数的程序的后半部份, 这次用 I<Data:Dumper> 模块： 


 use Data::Dumper; 


 my %total_bytes; 
 while (<>) { 
   my ($source, $destination, $bytes) = split; 
   $total_bytes{$source}{$destination} += $bytes; 
 } 


 print Dumper(\%total_bytes); 

I<Data::Dumper> 模块中定义了 I<Dumper> 子例程.这个子例子与调试工具中的x命令相似.我们可以给 I<Dumper> 子例程一个或多个值, I<Dumper> 会以人看得懂的格式返回这些值的内容.然而, I<Dumper> 与调试工具中x命令的不同是 I<Dumper> 输出的是 I<Perl> 代码： 


 myhost% perl bytecounts2 <bytecounts-in 
  $VAR1 = { 
           'thurston. howell. hut' => { 
                                      'lovey. howell. hut' => 1250 
                                    },  
           'ginger. girl. hut' => { 
                                  'maryann. girl. hut' => 199,  
                                  'professor. hut' => 1218 
                                },  
           'professor. hut' => { 
                                'gilligan. crew. hut' => 1250,  
                                'lovey. howell. hut' => 1360 
                              } 
         }; 
 myhost% 

这段 I<Perl> 代码很容易理解; 它显示我们有一个指向三个元素的散列的引用, 其中每个元素的值则是指向其它散列的引用的嵌套散列.我们可以求出这代码得出的散列同原来的散列值是等同的.但是, 如果你考虑通过这个将复杂数据结构保存下来, 并可以由其它的程序调用的话, 别急, 我们往下看就是了。  

I<Data::Dumper> , 同调试工具的命令行 x 命令一样, 处理共享数据属性.比如, 我们来看看先前第五章遇到的"内存泄漏"的例子： 


 use Data::Dumper; 
 $Data::Dumper::Purity = 1; # declare possibly self-referencing structures 
 my @data1 = qw(one won); 
 my @data2 = qw(two too to); 
 push @data2, \@data1; 
 push @data1, \@data2; 
 print Dumper(\@data1, \@data2); 

下面是程序的输出结果： 


 $VAR1 = [ 
          'one',  
          'won',  
          [ 
            'two',  
            'too',  
            'to',  
            [  ] 
          ] 
        ]; 
 $VAR1->[2][3] = $VAR1; 
 $VAR2 = $VAR1->[2]; 

注意我们是怎么创建了两个不同的变量, 因为传给了 I<Dumper> 两个参数.元素 I<$VAR1> 对应对 I<@data1> 的引用, 而 I<$VAR2> 对应对 I<@data2> 的引用.调试工作对值的展示类似： 


 DB<1> x \@data1, \@data2 
    0  ARRAY(0xf914) 
 0  'one' 
 1  'won' 
 2  ARRAY(0x3122a8) 
    0  'two' 
    1  'too' 
    2  'to' 
    3  ARRAY(0xf914) 
       -> REUSED_ADDRESS 
    1  ARRAY(0x3122a8) 
 -> REUSED_ADDRESS 

注意, 短语 I<REUSED_ADDRESS> 标示数据的一些部份实际上已引用了我们已经看到的一些数据。  

=head2 6. 3. YAML 

I<Data::Dumper> 并非在 I<Perl> 中输出数据的惟一玩法 I<.Brian> I<Ingerson> 提供了 I<Yet> I<Another> I<Markup> I<Language(YAML)> 来提供一种更具可读性的（也更节省空间）的输出办法.同 I<Data::Dumper> 的作法一样, 我们会在以后大谈特谈 I<YAML> , 所以这里就不费话了。  

同早先的例子一样, 我们在程序中写 I<Data::Dumper> 的地方替换成 I<YAML> , 在用 I<Dumper()> 函数的地方, 我们用 I<Dump()> 函数代替。.  


 use YAML; 


 my %total_bytes; 


 while (<>) { 
        my ($source, $destination, $bytes) = split; 
        $total_bytes{$source}{$destination} += $bytes; 
        } 


 print Dump(\%total_bytes); 

用前面提供的例子, 我们得到这样的输出： 


 --- #YAML:1. 0 
 ginger. girl. hut: 
  maryann. girl. hut: 199 
  professor. hut: 1218 
 professor. hut: 
  gilligan. crew. hut: 1250 
  lovey. howell. hut: 1360 
 thurston. howell. hut: 
  lovey. howell. hut: 1250 

这比先前读起来更容易, 因为占用的屏幕比较少, 如果你的数据结构嵌套比较深的话, 就很好用。  

=head2 6. 4. 用 I<Storable> 模块存储复杂数据结构 

我们可以取 I<Data::Dumper> 模块中的 I<Dumper> 子例程的输出, 将其放到一个文件中, 然后, 由另外一个程序把文件调入.在我们将这输出作为 I<Perl> 代码来解析的时候, 我们最后可以得到两个包变量： I<$VAR1> 和 I<$VAR2> , 并且这与原始的数据是一样的.这个过程就叫作调制数据：将复杂数据结构转换成一个表, 然后我们可以将其作为字节流写到文件中去, 便于以后重建这些数据。  

但是, I<Perl> 有另外一个模块更能胜任调制数据的工作： I<Storable.> 之所以更能胜任, 是因为相较于 I<Data::Dumper> , I<Storable> 产生的文件更小, 能被更快地执行 I<.(Storable> 模块在最近版本的 I<Perl> 的标准发布中就有, 但是, 如果你这里没有的话, 可以从 I<CPAN> 上下载安装 I<.)> 

与 I<Storable> 的接口同使用 I<Data::Dumper> 十分相似, 除了我们必须把所有东西要放到一个引用中去.比如, 让我们把存一个互相引用的数据结构： 


 use Storable; 
 my @data1 = qw(one won); 
 my @data2 = qw(two too to); 
 push @data2, \@data1; 
 push @data1, \@data2; 
 store [\@data1, \@data2], 'some_file'; 

这步产生的内容小于 I<100> 字节, 相比同样用 I<Data::Dumper> 的输出, 那是非常的小.这同样也更不具可读性.你不久也会了解, 这样的话更利于 I<Storable> 模块读这些数据 I<.[> *] 下一步, 我们同样用 I<Storable> 模块读取这些数据.产生的结果是一个指向单个数组的引用.我们把读出的结果打印出来, 看看是否存得对： 

[*] I<Storable> 采用的格式是缺省依赖字节顺序的结构.文档中有说明如果创建不依赖字节顺序的存储文件。  


 use Storable; 
 my $result = retrieve 'some_file'; 
 use Data::Dumper; 
 $Data::Dumper::Purity = 1; 
 print Dumper($result); 

下面是产生的结果： 


 $VAR1 = [ 
          [ 
            'one',  
            'won',  
            [ 
              'two',  
              'too',  
              'to',  
              [  ] 
            ] 
          ],  
          [  ] 
        ]; 
 $VAR1->[0][2][3] = $VAR1->[0]; 
 $VAR1->[1] = $VAR1->[0][2]; 

这在功能上等同于原来的数据结构.我们现在来看看在一个数组层面上的两个数组引用.同我们先前看到的比较相近, 我们可以更显式地返回值： 


 use Storable; 
 my ($arr1, $arr2) = @{ retrieve 'some_file' }; 
 use Data::Dumper; 
 $Data::Dumper::Purity = 1; 
 print Dumper($arr1, $arr2); 

下面也一样： 


 use Storable; 
 my $result = retrieve 'some_file'; 
 use Data::Dumper; 
 $Data::Dumper::Purity = 1; 
 print Dumper(@$result); 

这样, 我们就得到： 


 $VAR1 = [ 
          'one',  
          'won',  
          [ 
            'two',  
            'too',  
            'to',  
            [  ] 
          ] 
        ]; 
 $VAR1->[2][3] = $VAR1; 
 $VAR2 = $VAR1->[2]; 

就像我们在原来的程序里做的那样.用 I<Storable> 模块, 我们可以先存后取.欲得更多有关 I<Storable> 模块的信息, 可以用 I<perldoc> I<Storable> 来查, 老招术了：）  

=head2 6. 5. 使用 I<map> 和 I<grep> 操作符 

随着数据结构越来越复杂, 我们就能有更强的结构来处理那些经常性的拣选和转换的任务。 考虑这些因素, 掌握 I<Perl> 的 I<grep> 和 I<map> 操作符是值得的。  

=head2 6. 6. 搞些小伎俩 

有些问题看上去好像很复杂, 可是一旦你找到解决方案后, 会发现实际上很简单.比如, 假定我们要在一个列表中把数位加起来是奇数的元素找出来, 但我们不要元素本身, 我们要它们在列表里所在的位置。  

要完成这项任务需要一些小手段 I<.[> *] 首先, 我们有个拣选的问题, 因此, 我们使用 I<grep.> 我们不抓元素值本身, 找它们在列表里的位置。 

[*] 一条很著名的算法格言指出："没有什么问题太复杂, 而不能被采用适当手段来解决的 I<."> 当然, 用些小手段会使导致程序太难懂, 所以一定有些魔术在里面。  


 my @input_numbers = (1, 2, 4, 8, 16, 32, 64); 
 my @indices_of_odd_digit_sums = grep { . . .  
 } 0. . $#input_numbers; 

这里, 表达式 I<0..$> # I<input_numbers> 会是这个数组的索引号列表.在代码块里面, I<$_> 是个0～6的数字（总共7个元素）.现在, 我们并不要决定是否 I<$_> 的数位相加为奇数.我们要决定的是在这个位置上的元素的数位相加是否为奇数.所以, 我们感兴趣的不是 I<$_> , 而是 I<$input_numbers[$_]:> 


 my @indices_of_odd_digit_sums = grep { 
  my $number = $input_numbers[$_]; 
  my $sum; 
  $sum += $_ for split //, $number; 
  $sum % 2; 
 } 0. . $#input_numbers; 

其結果是, 索引位置：0, 4, 5上的值：1, I<16> , I<32> 符合条件.我们可以把这些索引放在数组片断里, 然后获得值： 


 my @odd_digit_sums = @input_numbers[ @indices_of_odd_digit_sums ]; 

这里运用 I<grep> 或者 I<map> 的技巧是把 I<$_> 值作为感兴趣的特定元素的标识来用, 比如散列的键或者数组的索引, 然后, 用这些标识, 在块中或者表达式中来访问实际的元素内容。  

这里是另一个例子：如果 I<@x> 中的元素比 I<@y> 中相应的元素大, 则取出来.又一次, 我们会用 I<$_> 来当作 I<@x> 中的索引序号来用： 


 my @bigger_indices = grep { 
  if ($_ > $#y or $x[$_] > $y[$_]) { 
    1; # yes, select it 
  } else { 
    0; # no, don't select it 
  } 
 } 0. . $#x; 
 my @bigger = @x[@bigger_indices]; 

在 I<grep> 中, I<$_> 由0增长到数组 I<@x> 的索引最大值.如果元素超出 I<@y> 的索引边界, 则自动会选择它.否则, 我们会比较相应位置的两个元素的大小, 选择符合我们要求的。  

然而, 这样的处理还是比较繁索.我们可以简单的返回布尔表达式, 而不是1或0： 


 my @bigger_indices = grep { 
  $_ > $#y or $x[$_] > $y[$_]; 
 } 0. . $#x; 
 my @bigger = @x[@bigger_indices]; 

更有甚者, 我们可以不用中间数组, 简单地用 I<map> 返回我们需要的数组： 


 my @bigger = map { 
  if ($_ > $#y or $x[$_] > $y[$_]) { 
    $x[$_]; 
  } else { 
    (  ); 
  } 
 } 0. . $#x; 

如果符合条件, 则返回数组元素.如果不符合, 则返回一个空列表, 使元素蒸发。  

=head2 6. 7. 拣选和修改复杂数据 

我们可以用这些操作符在更复杂的数据结构中.我们拿第五章的装备清单来看看： 


 my %provisions = ( 
  'The Skipper'   => [qw(blue_shirt hat jacket preserver sunscreen)],  
  'The Professor' => [qw(sunscreen water_bottle slide_rule radio)  ],  
  'Gilligan'      => [qw(red_shirt hat lucky_socks water_bottle)   ],  
 ); 

在本例中, I<$provisions{"The> I<Professor"}> 给出一个指向数组的引用, 表示教授买的装备清单, 而 I<$provisions{"Gilligan"}[-1]> 指向 I<Gilligan> 要带的最后一项东西。  

我们做一个查询：谁只带了不多于五件装备在身？ 


 my @packed_light = grep @{ $provisions{$_} } < 5, keys %provisions; 

在此例中, I<$_> 变量是乘客的名字。 我们用那人名, 在放装备的数组引用中查那个人, 然后在标量环境下还原那数组, 得出装备数量, 再以此与5比较。 而且你不知道, 这个乘客就是 I<Gilligan.(> 译者注：奇怪, 明明有两个符合条件： I<Gilligan> 和 I<Professor)>  

这里有个更搞的, 谁带了水瓶？ 


 my @all_wet = grep { 
  my @items = @{ $provisions{$_} }; 
  grep $_ eq 'water_bottle', @items; 
 } keys %provisions; 

同先前一样, 我们首先取乘客名字（ I<keys> I<%provisions> ）, 然后取那个乘客所带的所有装备列表, 之后, 在一个内部的 I<grep> 中计数有多少元素是 I<water_bottle.> 如果计数是0, 则表示没有, 所以返回 I<false> 给外部 I<grep.> 如果计数非零, 表示我们有一个水瓶, 所以返回真给外部 I<grep.> 现在我们可以看到 I<Skipper> 以后会是比较渴的那位, 以后没有任何缓解余地。  

我们还可以把数据转换成其它格式.比如, 将散列转换成一个对数组的引用, 其中每个数组含有两个元素。 第一个元素为乘客名字, 第二个元素则是对这个乘客的装备列表的引用： 


 my @remapped_list = map { 
   [ $_ => $provisions{$_} ]; 
 } keys %provisions; 

散列 I<%provisions> 的键是乘客的人名。 对于每个人名, 我们构键一个两个元素的列表, 其中有名字和对应的对装备清单列表的引用。 这个列表是由匿名数组构建的, 这样我们就获得每个乘客新创建数组的引用。 三个名字进去, 三个引用出来, [*] 或者, 让我们变换一种方法。 把输入的散列转换成一系列对数组的引用.每个数组将有一个乘客的名字和一个由他身带的装备: 

[*] 如果我们把内层的括号去掉, 我们会最后会得出六个单品。 那不是很常用, 除非为什么建立不同的散列。  


 my @person_item_pairs = map { 
   my $person = $_; 
   my @items = @{ $provisions{$person} }; 
   map [$person => $_], @items; 
 } keys %provisions; 

是的, 一个 I<map> 套一个 I<map.> 外圈的 I<map> 一次拣选一个乘客名字。 我们把这个名字放在变量 I<$person> 中, 然后我们从散列中抽取装备列表。 而内层的 I<map> 遍历装备清单, 执行一个表达式来为每个装备构建一个匿名数组引用。 每个匿名数组含有乘客的名字和他所带的装备名。  

这里, 我们已经使用 I<$person> 来保存外圈的 I<$_> 临时变量。 除此以外, 我们不能同时引用外圈和内圈 I<map> 的临时变量。  

=head2 6. 8. 习题 

在附录中找答案。  

=head2 6. 8. 1. 练习1 ［ I<20> 分钟］ 

第五章中的练习2中的程序要在每次执行的时候把整个数据文件读进内存。 然而教授每天都会有一个日志文件, 并且也不想让数据文件越来越大, 花很长的时间去执行。  

修改那个程序, 只要简单的收纳每天教授新产生的日志文件就可以计算数据文件中的即时总数。  

=head2 6. 8. 2. 练习2 ［5分钟］ 

要让这个程序真正有用, 还要采取其它什么功能？你只要说出来就可以了, 不必真正实现他们！ 

