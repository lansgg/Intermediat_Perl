=encoding utf8

=head2 Chapter 9. 实用引用技巧 

这一章我们来看看如何优化排序并且如何处理嵌套数据结构。  

=head2 9. 1. 再来看一下排序 

I<Perl> 内建的 I<sort> 排序操作符缺省情况下将文本字串以他们的字符顺序进行排序 I<.[> *] 这在我们进行字符排序时没有任何问题： 

[*] 我朋友把这叫做"按 I<ASCII> 表顺序"排序.通常来说, 当前的 I<Perl> 已经不用 I<ASCII> 字符表了; 它依照当前的缺省字符集的排序顺序来进行排序.具体可以查看 I<perllocale(> 不是 I<perllocal> !)文档页。  


 my @sorted = sort qw(Gilligan Skipper Professor Ginger Mary_Ann); 

可是, 当我们对数字进行排序的时候却是一团糟： 


 my @wrongly_sorted = sort 1, 2, 4, 8, 16, 32; 

排序的结果是：1, I<16> , 2, I<32> , 4, I<8.> 为什么不能按正确的顺序排序呢？ 是因为是把它们按字串对待, 以字串的顺序进行排序.任何以3开头的训是排在以4开头的字串之前。  

如果我们不想按缺省的排序顺序, 我们不必重写整个排序算法, 好消息是 I<Perl> 已经有好的方法了来处理这件事情了.因为不管我们采用什么算法, 从某种程序上说, 这本质是个A和B谁靠前的问题.这就是我们要写的那部分代码：处理两个元素的代码.然后 I<Perl> 来处理余下的事情。  

在缺省时, 当 I<Perl> 对元素进行排序的时候, 它采用的是字符比较.我们可以用一个放在 I<sort> 关键字与要排序的元素列表中间的代码块来指定排序算法.［＋］ 在排序代码块中, I<$a> 和 I<$b> 代表要比较的两个元素.如果我们要对数字进行排序, 那么 I<$a> 和 I<$b> 会是来自于我们列表中的两个元素。  

[] 我们同样也可以用命名子程序来每个比较。  

排序代码块必须返回一个代码值来指明排序的次序.如果我们希望 I<$a> 在 I<$b> 前, 我们应该返回 I<-1> ;反之, I<$b> 排在 I<$a> 前, 它应该返回+1;如果次序并不重要, 则应该返回 I<0.> 所谓次序不重要的意思是, 比如, 如果是大小写不敏感的排序, I<"FRED"> 和 I<"Fred"> , 或者如果数值比较的话, I<42> 和 I<42.> [*] 

［＊］实际上, 我们可以用任一个负值或正值来代替 I<-1> 和+ I<1.> 新近的 I<Perl> 版本的缺省排序引引擎很稳定, 所以, 如果返回0, 则会使用 I<$a> 和 I<$b> 在原来列表里的相对次序.旧版本的 I<Perl> 不能保证如此的稳定, 而未来的版本可能不用这种稳定的排序, 所以不能依赖于此。  

举个例子, 以正常的次序对数字进行排序, 我们可以用个排序代码块比较 I<$a> 和 I<$b> , 像这样： 


 my @numerically_sorted = sort { 
   if ($a < $b)    { -1 } 
   elsif ($a > $b) { +1 } 
   else            {  0 } 
 } 1, 2, 4, 8, 16, 32; 

目前, 我们对数字进行了合适的比较方法, 所以有了正常的数字排序.当然, 如此的排序方法还是繁琐, 所以我们可以用一个飞船操作符来代替： 

my @numerically_sorted = sort { $a <=> $b } 1, 2, 4, 8, 16, 32; 

飞船操作符按我们前面的算法返回 I<-1> , 0或+ I<1.> 如果是降序, 在 I<Perl> 中也很简单 ：［＋］[] 

[] ［＋］在 I<5.8.6> 版本中, I<Perl> 识别反向排序, 而且并不产生临时, 中间列表。  


 my @numerically_descending = 
    reverse sort { $a <=> $b } 1, 2, 4, 8, 16, 32; 

但是, 所谓殊途同归.飞船是近视的; 它不能看到参数中哪个来自 I<$a> , 哪个来自 I<$b> ;它只看哪个值在它的左边, 哪个在右边.如果 I<$a> 和 I<$b> 换了位置, 则飞船操作符则会将其反序排列： 


 my @numerically_descending = 
    sort { $b <=> $a } 1, 2, 4, 8, 16, 32; 

在前例中, 表达式原来返回－1的, 现在返回＋1, 相反也是一样.所以, 排序出来的结果是反向排序, 所以也不要 I<reverse> 关键字了.这样也容易记得, 因为如果 I<$a> 是在 I<$b> 左边, 我们得到从小到大的排序, 就像a和b在结果列表中一样。  

哪种方法更好？ 什么时间我们用 I<reverse> 来反向排序, 什么时候用交换 I<$a> 和 I<$b> 位置来排序呢？ 好, 大多数情况下, 他们对性能上没有什么差异.所以可能为了表达清楚, 我们用 I<reverse.> 然而, 为了更复杂的的比较, 单个 I<reverse> 又可能不是最好。  

类似于飞船操作符, 我们可以为字串排序用 I<cmp> , 尽管其很少单独使用, 因为它是排序方法.我们以后马上就会讲到, I<cmp> 操作符在复杂比较中非常常用。  

=head2 9. 2. 用索引排序 

在之前的第二章, 我们用 I<grep> 和 I<map> 结合索引来解决了一些问题.我们也可以用排序结合索引来得到一些有趣的结果.比如说, 让我们对前面的名字列表排序： 


 my @sorted = sort qw(Gilligan Skipper Professor Ginger Mary_Ann); 
 print "@sorted\n"; 

我们所需的输出是： 


 Gilligan Ginger Mary_Ann Professor Skipper 

但是, 如果我们要看这排序后的列表中各元素在排序前的位置应该如何做呢？ 比如, I<Ginger> 排序后是在第二位, 而在原始列表中它是第四位元素.我们如何确它排序后的第二位元素是排序前的第四位元素呢？ 

好, 我们可以稍微间接的来做.我们来为名字的索引排序, 而不是为实际的名字排序。 


 my @input = qw(Gilligan Skipper Professor Ginger Mary_Ann); 
 my @sorted_positions = sort { $input[$a] cmp $input[$b] } 0. . $#input; 
 print "@sorted_positions\n"; 

这次, I<$a> 和 I<$b> 并非列表中的元素, 而是索引.所以, 不是对 I<$a> 和 I<$b> 比较, 我们用 I<cmp> 对 I<$input[$a]> 和 I<input[$b]> 所含的字串进行比较.而排序的结果则是索引, 这索引是按数组 I<@input> 中的相应的次序进行排列的.输出是0 3 4 2 1, 这意思是：排序后的首位元素是原来列表的首位元素, I<Gilligan.> 排序后的第二位元素是原始列表的第4个元素, 即 I<Ginger> , 以此类推.现在我们可以不仅仅是把名字移来移去, 而可以做个分级排名的东西了。  

事实上, 我们也有了倒过来的排名.即, 给定原始的列表, 在排序后他们所占的位置是什么.当然, 戏法也得上一层楼, 我们可以这样做： 


 my @input = qw(Gilligan Skipper Professor Ginger Mary_Ann); 
 my @sorted_positions = sort { $input[$a] cmp $input[$b] } 0. . $#input; 
 my @ranks; 
 @ranks[@sorted_positions] = (0. . $#sorted_positions); 
 print "@ranks\n"; 

这段代码输出是这样的：0 4 3 1 I<2.> 这就是说 I<Gilligan> 在输出列表中还是老大, I<Skipper> 是在输出列表中倒数第一, 教授是3, 以此类推.这里的序数是以0为基数的, 所以我们可以加1, 让他看起来像人话.一种骗术是用 I<1..@sorted_positions> 代替 I<0..$> # I<sorted_positions> , 所以写出来是这样的： 


 my @input = qw(Gilligan Skipper Professor Ginger Mary_Ann); 
 my @sorted_positions = sort { $input[$a] cmp $input[$b] } 0. . $#input; 
 my @ranks; 
 @ranks[@sorted_positions] = (1. . @sorted_positions); 
 for (0. . $#ranks) { 
   print "$input[$_] sorts into position $ranks[$_]\n"; 
 } 

其输出结果如下： 


 Gilligan sorts into position 1 
 Skipper sorts into position 5 
 Professor sorts into position 4 
 Ginger sorts into position 2 
 Mary_Ann sorts into position 3 

这些一般的方法可以使方便地我们以不同的角度来看我们的数据.可以我们以效率的原因使我们数据以数字顺序排, 但有时我们又要他们以字母顺序排.或者, 可能这些数据项目自己本身顺序并没有多大意义, 比如一个月的服务器日志的价值。  

=head2 9. 3. 更有效率的排序 

因为教授要维护社区的计算设备（全都由竹子, 椰子, 菠萝, 并由一个经过 I<Perl> 黑客级别认证的猴子来提供支援）, 然后他发现有些人把太多数据给猴子来处理, 所以决定打印出一份罪犯名单。  

教授写了一个子程序 I<ask_monkey_about()> , 这个程序接受一个 I<castaway> 成员的名字, 然后返回他们用了菠萝总储量中的多少.我们问猴子是因为他管这事儿.最初的找出罪犯的程序可以如下的样子： 


 my @castaways = 
   qw(Gilligan Skipper Professor Ginger Mary_Ann Thurston Lovey); 
 my @wasters = sort { 
   ask_monkey_about($b) <=> ask_monkey_about($a) 
 } @castaways; 

按理, 这个程序不错.对于第一对名字（ I<Gilligan> 和 I<Skipper)> , 我们问下猴子： I<"Gilligan> 有多少菠萝？" 和 I<"Skipper> 手里有多少菠萝？" 我们从猴子那里得到这个值后, 并以此来将 I<Gilligan> 和 I<Skipper> 在最终的列表中排座次。  

然而, 我们还得把 I<Gilligan> 手中的持有的菠萝数量与其它 I<castaway> 成员手中持有的菠萝数目相比较。 比如, 假定我们对比的是 I<Ginger> 和 I<Gilligan.> We ask the monkey about Ginger, get a number back, and then ask the monkey about Gilligan. . . again. 这可能会让猴烦不胜烦, 因为我们早前已经问过它了。 但我们必须再二再三, 再三再四地为每个值去问, 直到把七个值排顺。  

这可能会成为一个问题, 这太刺激猴子了。  

那我们怎么能将询问猴子的次数降为最低呢？ 这样, 我们先建一张表.我们用一个 I<map> 和七个输入输出项, 将每个 I<castaway> 元素做成一个数组引用, 每个数组引用包含两个元素, 一个是成员名字, 一个猴子报告的其所持菠萝的数目： 


 my @names_and_pineapples = map { 
   [ $_, ask_monkey_about($_) ] 
 } @castaways; 

这次, 我们在一次把把七个问题向猴子问完了, 但这也是最后一次！ 我们现在已经有了要完成任务所有的东西了。  

为了下一步, 我们把数组引用排序, 以猴子报告的数值为序： 


 my @sorted_names_and_pineapples = sort { 
   $b->[1] <=> $a->[1]; 
 } @names_and_pineapples; 

在这个子程序中, I<$a> 和 I<$b> 列表中要排序的两个元素.当我们对数字进行排序的时候, I<$a> 和 I<$b> 是数字.当我们对引用进行排序时, I<$a> 和 I<$b> 就是引用.我们将他们还原成相应的数组, 并且将他们的第二个元素取出来（猴子报告的菠萝数目）.因为 I<$b> 排在 I<$a> 之前, 所以, 它是一个由大到小的降序排列.（我们需要降底是因为教授要有菠萝持有最多的那个人） 

我们差不多要完成了, 但如果我们仅仅要名字, 而不要名字和菠萝数呢？ 我们只要做一下另一个 I<map> , 把引用变换成原来的数据就可以了： 


 my @names = map $_->[0], @sorted_names_and_pineapples; 

列表中每个元素都是 I<$_> , 所以, 我们还原它, 并取出第一个元素, 就是名字。  

这样我们就有一个名字的列表, 并以他们所持菠萝的数目由大到小排列, 仅仅用三步, 也可以把猴子轻松放下。  

9. 4. 施瓦茨变换 

每一步当中的中间变量, 除了作为下一步的入, 实际上并不需要他们.我们可以把这些步骤全都堆在一块儿, 这也节省点力气。 


 my @names = 
   map $_->[0],  
   sort { $b->[1] <=> $a->[1] } 
   map [ $_, ask_monkey_about($_) ],  
   @castaways; 

因为 I<map> 和 I<sort> 操作是从右到左分析的, 我们读这些结构时应该由下而上的读.所以顺序是这样的：先取数组 I<@castaways> , 问下小猴一些问题后, 创建一个数组引用, 将数组引用列表排序, 并抽出数组引用中的名字.这样我们就将名字列表以希望的顺序排序。  

这个结构一般叫做施瓦茨变换, 它以兰德命名（并不是他本人起的）, 感谢新闻组张贴他的程序使他成名多年。 施瓦茨变换已经被证明是我们的排序技巧的武器库中非常有效的利器。  

如果你觉得这个技巧太复杂而难以记忆或提供一种简明的办法, 下面这种简化成常量的表达可能更灵活一点： 


 my @output_data = 
   map $_->[0],  
   sort { SORT COMPARISON USING $a->[1] AND $b->[1] } 
   map [ $_, EXPENSIVE FUNCTION OF $_ ],  
   @input_data; 

基本的结构将原始的列表变成一个数组引用的列表, 为每个成员只计算一次昂贵的计算; 将数组引用排序以缓存中通过前面昂贵的计算得到的结果进行排序［＊］, 然后抽出原始的值, 以前的次序排.我们所要做的全部工作就是将两个操作合适发安排, 然后事儿就这样成了.比如, 按照施瓦茨变换来实现一个不区分大小写的排序, 我们可以这样编码：［＋］ 

[*] 一个昂贵的操作是花相对时间长的操作, 或者相对使用大量内存的操作。  

[] 这只是在当转换大写是非常昂贵时才是有效的, 或当我们的字串很长或要排的字串很多时。 对于小数量的或不长的字串, 简单的一句： I<my> I<@output_data> = I<sort> { I<"\U$a"> I<cmp> I<"\U$b"}> I<@input_data> 就能解决问题, 足够有效率了。 如果不信, 作基准测试吧。  


 my @output_data = 
   map $_->[0],  
   sort { $a->[1] cmp $b->[1] } 
   map [ $_, "\U$_" ],  
   @input_data; 

=head2 9. 5. 用施瓦茨变换作多层排序 

如果我们需要用多个测试条件进行排序, 施瓦茨变换照样可以处理这样的任务。  

my @output_data = 
  map $_->[0],  
  sort { SORT COMPARISON USING $a->[1] AND $b->[1] or 
          ANOTHER USING $a->[2] AND $b->[2] or 
      YET ANOTHER USING $a->[3] AND $b->[3] } 
  map [ $_, SOME FUNCTION OF $_, ANOTHER, YET ANOTHER ],  
  @input_data; 

这个代码结构是三层的排序条件, 把三个计算过的值放到一个匿名数组里（还有把原始值放在排过序的列表中第一个位置.）  

=head2 9. 6. 数据的嵌套定义 

我们到现在为止处理的引用都是固定结构的, 可有时候我们要处理一般同递归来定义的层次结构的数据。  

举个例子来说, 考虑一下一个含有表行表列的 I<HTML> 表, 而表里的单位格可能还有其它的表.例二是个虚拟的文件系统的例子, 一个文件系统中有一些目录, 而在目录中有文件或其它目录.例子三是公司的组织结构图, 各部经理向他们的上司报告, 而其中有的经理向自己报告.例子四是更加复杂的组织结构图, 可以包括上述例一的 I<HTML> 表、例二的文件系统, 或者整个公司的组织结构图表……  

我们可以用引用的办法来获得, 存储以及处理这些层次结构的信息.一般来说, 处理这些层次结构的子程序最终都是递归程序。  

递归算法用处理起始的一个基础例子并由此建立的程序来处理无限复杂的数据 I<.[> *] 所谓基础例子是指在一个最最简单的情况下如何处理：没有分支的叶子节点, 当数组还是空的情况, 当计数器是零时.实际上, 在递归算法的不同分支中一般有多个基础例子.如果递归算法没有基础例子, 程序就会导致无限循环。  

[*] 递归程序应该都有一个基础的, 或最简的例子, 这种例子无须再用递归处理了, 而且其它递归可以在此结束.就是说, 除非我们手上有的是时间让它永无止境地运行下去。  

递归子程序有一个分支来调用自己来处理部份任务, 有一个分支处理基础例子.在上面第一个例子中, 基础例子就是当表格单元空的时候.同样空行或空表也是基础例子.在第二人例子中, 基础例子是文件或者空的目录。  

比如, 下面的一个处理阶乘的递归子程序, 是最简单的递归应用： 

sub factorial { 
  my $n = shift; 
  if ($n <= 1) { 
    return 1; 
  } else { 
    return $n * factorial($n - 1); 
  } } 

Here we have a base case where $n is less than or equal to 1, which does not invoke the recursive instance, along with a recursive case for $n greater than 1, which calls the routine to handle a portion of the problem (i. e. , compute the factorial of the next lower number).  

这个任务可能用迭代来做比用递归更好, 即使阶乘的经典定义是常常被作为一个递归操作。  

=head2 9. 7. 构建嵌套定义的数据 

我们可能要收集一个文件系统的信息, 包括文件名和目录名, 以及他们的内容。 用一个散列代表目录, 在其中, 键代表条目名字, 其值如果是未定义则代表是一般的文件。 以 I</bin> 目录为例： 


 my $bin_directory = { 
   cat  => undef,  
   cp   => undef,  
   date => undef,  . . . and so on. . .  
 }; 

类似的, I<Skipper> 的主目录同样包括一个属于他自己的 I<bin> 目录（多少象~ I</skipper/bin> ）, 其中有些他个人的工具： 


 my $skipper_bin = { 
   navigate            => undef,  
   discipline_gilligan => undef,  
   eat                 => undef,  
  }; 

上面两个例子没有说目录是否是在一个层次结构里面.它仅仅表示了一个目录里的一些内容。  

我们往上跑一级, 到 I<Skipper> 的主目录, 里面有些文件, 并且有他自己的一个 I<bin> 目录： 


 my $skipper_home = { 
   '. cshrc'                        => undef,  
     'Please_rescue_us. pdf'        => undef,  
     'Things_I_should_have_packed' => undef,  
   bin                             => $skipper_bin,  
 }; 

哈, 注意, 我们现在有三个文件, 但是第四个条目 I<bin> 没有含有未定义值, 而是一个散列引用, 这个引用是先前建立的指向 I<Skipper> 的个人的 I<bin> 目录。 这就是我们标识子目录的方法.如果值不是未定义, 则它是一个文件; 如果是个散列引用, 我们就是指向一个子目录, 其拥有自己的文件和其它子目录。 当然, 我们可以把两者合在一起： 


 my $skipper_home = { 
   '. cshrc'                    => undef,  
   Please_rescue_us. pdf        => undef,  
   Things_I_should_have_packed => undef,  


   bin => { 
     navigate            => undef,  
     discipline_gilligan => undef,  
     eat                 => undef,  
   },  
 }; 

现在分层性质的数据开始起作用了.  

显然, 我们不必在程序里用硬编码的形式来构建和维护这个结构。 我们可以用子程序来获取这些数据。 写个子程序, 如果找到的是文件, 则返回未定义值, 如果是目录的话, 则返回一个散列引用。 最基本的查看文件的例子是最简单的, 所以我们可以这样写： 


 sub data_for_path { 
   my $path = shift; 
   if (-f $path) { 
     return undef; 
   } 
   if (-d $path) { . . .  
   } 
   warn "$path is neither a file nor a directory\n"; 
   return undef; 
 } 

如果 I<Skipper> 调用这个时找到 I<.cshrc> , 我们返回未定义值, 表示看到一个文件。  

现在要对付目录部份了.我们需要一个散列引用, 我们声明一个命名散列放在子程序中。 为散列中每个元素, 我们调用自己来发布元素值.程序如下： 


 sub data_for_path { 
   my $path = shift; 
   if (-f $path or -l $path) {        # files or symbolic links 
     return undef; 
   } 
   if (-d $path) { 
     my %directory; 
     opendir PATH, $path or die "Cannot opendir $path: $!"; 
     my @names = readdir PATH; 
     closedir PATH; 
     for my $name (@names) { 
         next if $name eq '. ' or $name eq '. . '; 
         $directory{$name} = data_for_path("$path/$name"); 
     } 
     return \%directory; 
   } 
   warn "$path is neither a file nor a directory\n"; 
   return undef; 
 } 

这个递归算法中的基础情况是文件和符号链接。 如果文件系统中的符号链接指向目录, 好像是真的（硬）连接, 这个算法不能正确遍历文件系统.因为如果符号链接指向一个包含着符号链接的目录的话, 它会最终走向一个循环。 [*] 在遍历一个错误格式的文件系统时也会出错.所谓错误格式的文件系统是指, 目录形成一个循环结构, 而不是树形结构。 尽管错误格式的文件不一定成为问题, 递归算法一般来说在遇到循环数据结构时会有麻烦。  

[*] 这并不是说我们任何人都没有碰到过, 并奇怪为什么程序一直运行.第二次确实不是我们的错, 第三次只是运气不好.这就是我们的故事而且挥之不去。  

对于目录中的每个文件都会查一下, 从递归调用 I<data_for_path> 得到的结果就是未定义值。 这就生成了散列中大部份的值。 当一个命名引用返回时, 引用立即跑出程序范围, 所以成为对一个匿名散列的引用。 (数据本身并没有改变, 但是我们可以有多种方法来访问数据变化。 ) 

如果这其中是个子目录, 则嵌套子程序调用使用 I<readdir> 抽出目录内容, 并返回一个散列引用, 并由调用者放到散列结构中。  

一开始, 这看上去好像很搞, 但是, 只要我们慢慢读完这个程序, 我们会发现它总能完成任务。 调用它一下, 看看结果如何.（在当前目录中）检查一下结果： 


 use Data::Dumper; 
 print Dumper(data_for_path('. ')); 

显然, 如果我们自己的目录里有子目录的话, 那看上去就有趣多了。  

=head2 9. 8. 显示嵌套数据g 

用 I<Data::Dumper> 模块的 I<Dumper> 程序显示输出是不错, 但如果我们不喜欢它使用的格式怎么办呢？ 我们可以写一个程序来显示数据.同样, 对于嵌套定义的数据, 我们用递归子程序是关键。  

为了打印出数据, 我们必须知道顶层目录的名字, 因为它不会存储在嵌套结构中： 


 sub dump_data_for_path { 
             my $path = shift; 
             my $data = shift; 


             if (not defined $data) { # plain file 
                     print "$path\n"; 
                     return; 
                     } . . .  
             } 

对于文件, 我们打印出路径名; 对于目录, 变量 I<$data> 是一个散列引用.我们则遍历所有的键, 输出对应的值： 


 sub dump_data_for_path { 
         my $path = shift; 
         my $data = shift; 


         if (not defined $data) { # plain file 
                 print "$path\n"; 
                 return; 
         } 


         my %directory = %$data; 


         for (sort keys %directory) { 
                 dump_data_for_path("$path/$_", $directory{$_}); 
         } 
 } 

对于目录中的每个元素, 我们传一个包含下一项元素的当前路径, 以及一个散列值, 这个值要么是未定义, 表示是文件, 或下一个子目录的散列引用.我们运行一下, 看下结果： 


 dump_data_for_path('. ', data_for_path('. ')); 

同样, 如果散列数据有子目录的话, 效果更精彩.不过输出结果同如下的脚本类似： 


 find. -print 

取自于 I<UNIX> I<shell> 的提示。  

=head2 9. 9. 习题 

答案附录找。  

=head2 9. 9. 1. 习题 1 I<[15> 分钟] 

用 I<glob> 操作符, 把 I</bin> 目录中所有的文件, 以他们的文件大小为序排序, 可能的代码如下： 


 my @sorted = sort { -s $a <=> -s $b } glob "/bin/*"; 

用施瓦茨变换重写这个程序。  

如果你发现在 I</bin> 中没有文件, 可能是因为你用的不是 I<UNIX> 系统, 所以可以按需改一下 I<glob> 的参数。  

=head2 9. 9. 2. 练习2 ［ I<15> 分钟] 

读一下 I<Perl> 里的 I<Benchmark> 模块.写个程序解决一个问题："用了施瓦茨变换使练习1的任务快了多少？" 

=head2 9. 9. 3. 练习3 ［ I<10> 分钟] 

用施瓦茨变换, 读一列表词, 以"字典顺序"对他们进行排序.所谓字典顺序忽略大小写和和音节符.暗示：下列转换可能有用： 


 my $string = 'Mary-Ann'; 
 $string =~ tr/A-Z/a-z/;       # force all lowercase 
 $string =~ tr/a-z//cd;        # strip all but a-z from the string 
 print $string;                # prints "maryann" 

注意, 不要把数据搞乱了！ 如果输入是 I<Professor> 和 I<skipper> , 那么输出也应该是这个次序, 同样的大小写。  

=head2 9. 9. 4. 练习4 I<[20> 分钟] 

修改一下递归目录打印程序, 让它以缩进的形式显示嵌套子目录.一个空的目录应该如下显示： 


 sandbar, an empty directory 

非空的子目录应该用缩进两人空格的方法显示嵌套内容： 


 uss_minnow, with contents: 
   anchor 
   broken_radio 
   galley, with contents: 
     captain_crunch_cereal 
     gallon_of_milk 
     tuna_fish_sandwich 
   life_preservers 


 sub navigation_turn_toward_port { . . code here. .  
 } 


 1; 

是的, 每个标量, 数组名, 散列, 文件句柄或者子程序现在都必须加上一个 I<navigation_> 前缀, 这样才能保证不与其它的库里潜在的用户发生冲突。 显然, 对于老水手来说, 他是不会干这种事的.我们能用什么替代方案呢？ 

