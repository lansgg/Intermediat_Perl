=encoding utf8

=head2 Chapter 4. 介绍引用 

引用是复杂数据结构、面向对象编程和令人眩目的子例程魔术的基础。 I<Perl> 版本4和版本5加入的一些功能使这些魔术成为可能。  

一个 I<Perl> 标量变量保存一个单个值。 一个数组保存一个或多个标量的次序列表。 一个散列保存一个标量作为键值, 另一个标量作为值。 尽管一个标量可以是任意字串, 可以被复杂数据结构用来编入一个数组或一个散列, 但是三种数据类型中没有一个适合用来做复杂数据关系。 这就是引用的工作。 我们由一个例子来探查一下引用的重要性。  

=head2 4. 1. 用多个数组来完成一个简单任务 

在 I<Minnow> 开始一个旅程之前（比如一个三小时的远足）, 我们应该事先检查一下每个乘客和乘务人员的行李, 保证他们带了旅行所需要的东西.比如说吧, 水上安全救生装备.在 I<Minnow> 船上的每个乘客要生命维持系统, 太阳镜和水瓶以及雨衣。 我们来写段代码来检查船长的装备。 


 my @required = qw(preserver sunscreen water_bottle jacket); 
 my @skipper  = qw(blue_shirt hat jacket preserver sunscreen); 


 for my $item (@required) { 
   unless (grep $item eq $_, @skipper) { # not found in list? 
     print "skipper is missing $item. \n"; 
   } 
 } 

I<grep> 在标量环境下返回表达式 I<$item> I<eq> I<$_> 为真时的元素的个数, 如果在列表里就是1否则是 I<0.[> *]如果值是0, 则为 I<false> , 我们打印出消息。  

[*] 如果列表很大, 我们有更有效率的办法.但是对于这样的小 I<case> , 现在了了数行的办法更简便。  

当然, 如果我们想查一个 I<Gilligan> 和教授的, 我们可能要写如下的代码： 


 my @gilligan = qw(red_shirt hat lucky_socks water_bottle); 
 for my $item (@required) { 
   unless (grep $item eq $_, @gilligan) { # not found in list? 
     print "gilligan is missing $item. \n"; 
   } 
 } 


 my @professor = qw(sunscreen water_bottle slide_rule batteries radio); 
 for my $item (@required) { 
   unless (grep $item eq $_, @professor) { # not found in list? 
     print "professor is missing $item. \n"; 
   } 
 } 

你可能开始注意到有些重复代码, 开始想法把它重构一下, 整合到一个通用的子例程里以便重用（你做得对！）： 


 sub check_required_items { 
   my $who = shift; 
   my @required = qw(preserver sunscreen water_bottle jacket); 
   for my $item (@required) { 
     unless (grep $item eq $_, @_) { # not found in list? 
       print "$who is missing $item. \n"; 
     } 
   } 
 } 


 my @gilligan = qw(red_shirt hat lucky_socks water_bottle); 
 check_required_items('gilligan', @gilligan); 

一开始, I<Perl> 给子例程五个元素：一个 I<gilligan> 名字以及另外属于数组 I<Gilligan> 的四个元素 I<.shift> 操作之后, I<@_> 仅包括四个元素, 因此, I<grep> 用每个出海必备装备来核对这个四个元素的列表。  

到目前为止进展顺利.我们可以检查船长和教授的装备, 只用如下一点代码： 


 my @skipper   = qw(blue_shirt hat jacket preserver sunscreen); 
 my @professor = qw(sunscreen water_bottle slide_rule batteries radio); 
 check_required_items('skipper', @skipper); 
 check_required_items('professor', @professor); 

对于另外两个乘客, 我们可以如法泡制.尽管以上代码符合最初的要求, 我们还是要有两个问题要解决： 

为了建立数组 I<@_> , I<Perl> 会拷贝整个数据内容.对于少量数据还可以, 但如果数组庞大, 这看上去多少有些浪费时间在拷贝数组到子例程。  

假定我们要修改原始数组来强制供应单里加上些硬性规定的物品.因为我们是拷贝到子例程的（传值）, 任何对数组的改变都不会自动反映到相应的供应单中。 [*] 

[*] 实际上, 用 I<shift> 修改传过来的数组, 把新的标量赋值给数组 I<@_> 的一个元素是可以的.但这任不能改变原来的供应单。  

要解决这些问题, 我们需要传引用而不是传值给子例程.这就是医生（或教授）要求的。  

=head2 4. 2. 建立一个对数组的引用 

Among its many other meanings, the backslash (\) character is also the "take a reference to" operator. When we use it in front of an array name, e. g. , \@skipper, the result is a reference to that array. A reference to the array is like a pointer: it points at the array, but it is not the array itself.  

标量合适的操作对于引用都一样合适.它可以是数组或散列中的一个元素, 或简单就是一个标量变量, 像下面所示： 


 my $reference_to_skipper = \@skipper; 

引用可以被复制： 


 my $second_reference_to_skipper = $reference_to_skipper; 

甚至于： 


 my $third_reference_to_skipper = \@skipper; 

我们可以互换这三个引用.我们甚至说他们是相同的, 因为, 实际上他们指的是同一地址。  


 if ($reference_to_skipper =  = $second_reference_to_skipper) { 
   print "They are identical references. \n"; 
 } 

这个等式是以数值形式来比较两个引用的.引用的数值形式就是 I<@skipper> 这个内部数据结构在内存中的惟一地址, 且在这个变量的生命周期之内是不变的.如果我们以字串形式来看的话, 我们会得到如下调试形式的字串： 


 ARRAY(0x1a2b3c) 

其内容同样是以十六进制表示的（ I<base16> ）的这个数组惟一内存地址.调试字串还标明了这个引用指向的是个数组.当然, 如果我们什么时候看到这样的输出的话, 这多半意味着我们的程序出了 I<bug> ;我们程序的用户可对十六进制的存储地址可一点兴趣都没有！ 

因为我们可以拷贝一个引用, 并且作为参数传给一个子例程, 我们可以用如下代码把对数组的引用传给子例程： 


 my @skipper = qw(blue_shirt hat jacket preserver sunscreen); 
 check_required_items("The Skipper", \@skipper); 


 sub check_required_items { 
   my $who = shift; 
   my $items = shift; 
   my @required = qw(preserver sunscreen water_bottle jacket); . . .  
 } 

现在子例程中的 I<$items> 变量保存的是指向数组 I<@skipper> 的引用.但我们如何时把一个引用变回一个原始数组呢？当然, 我们可以还原一个引用。  

=head2 4. 3. 还原一个指向数组的引用 

我们看一下 I<@skipper> , 你会发现它包括两部份：@符号和数组名.相似地, 语法 I<$skipper[1]> 包括当中的数组名和围绕在周围的语法符号表示取这个数组的第二个元素（索引1表示取第二个元素, 因为索引起始值是0）。  

这里有一个小戏法：我们可以用在外面套上大括号的指向数组的引用, 来替换数组的名字, 其结果就是访问原始的数组.换句话说, 就是我们写 I<sipper> 数组名字的地方, 可以用大括号包起来的指向数组的引用来代替： I<{$items}.> 举例来说, 下面两行都指向同一数组： 


 @  skipper 
 @{ $items } 

同样, 下面两行同指这个数组的第二个元素：[*] 

[*] 注意, 为了对齐语法上的各部份, 我们在上面的例子中加了空格.这些空格在程序上也是合法的, 尽管许多程序不必如此。  


 $  skipper [1] 
 ${ $items }[1] 

运用引用的形式, 我们已经可以分离数组名字和从实际数组中访问数组的方法.我们来看看子例程的余下部分： 


 sub check_required_items { 
   my $who   = shift; 
   my $items = shift; 


   my @required = qw(preserver sunscreen water_bottle jacket); 
   for my $item (@required) { 
     unless (grep $item eq $_, @{$items}) { # not found in list? 
       print "$who is missing $item. \n"; 
     } 
   } 
 } 

我们做的仅仅就是把 I<@_(> 供应清单的拷贝)替换成 I<@{$items}> , 对一个引用的还原操作来取得原始的供应清单数组.现在我们调用子例程次数相比以前少多了。 


 my @skipper = qw(blue_shirt hat jacket preserver sunscreen); 
 check_required_items('The Skipper', \@skipper); 


 my @professor = qw(sunscreen water_bottle slide_rule batteries radio); 
 check_required_items('Professor', \@professor); 


 my @gilligan = qw(red_shirt hat lucky_socks water_bottle); 
 check_required_items('Gilligan', \@gilligan); 

以上每个例子中, I<$items> 指向一个不同的数组.如此, 同样的代码每次调用的时候可以应用到不同的数组.这就是引用的一个最重要的用法之一：把代码同其操作的具体数据结构分离开, 这样我们可以重用代码并使其更可读。  

用引用传数组解决了我们上面提到的两个问题中的一个.即, 相比以前我们拷贝供应清单到 I<@_> 数组, 现在我们传一个指向供应清单数组的单值。  

我们是否可以消除传两个值给子例程？当然可以, 不过这样牺牲了明晰性： 


 sub check_required_items { 
  my @required = qw(preserver sunscreen water_bottle jacket); 
  for my $item (@required) { 
    unless (grep $item eq $_, @{$_[1]}) { # not found in list? 
      print "$_[0] is missing $item. \n"; 
    } 
  } 
 } 

我们仍有两个元素在数组 I<@_> 中.第一个元素是成员或乘务员的名字, 我们用它来组成出错信息.第二个元素是指向供应清单数组的引用.我们把它用在 I<grep> 表达式中。  

=head2 4. 4. 把大括号去掉 

一般来说, 还原对数组的引用大多是一个简单的标量变量, 比如： I<@{$items}> 或者 I<${$items}[1].> 在那些情况下, 我们可以把大括号去掉, I<@$items> 或 I<$$items[1]> 这样的形式并不会引起歧义。  

但是, 有一点, 如果大括号里的内容不是简单的标量变量的话, 我们就不能把大括号去掉.比如, 对于前面最后一个改写过的子例程中的 I<@{$_[1]}> , 我们不能把大括号去掉.因为那是个正访问数组的元素, 而不是一个简单的标量变量。  

这个规则也方便我们知道哪里丢了大括号.比如我们看到 I<$$items[1]> 的时候, 知道这会有些语法上的麻烦, 我们会意识到必须在简单标量变量 I<$items> 周围加上大括号.如此, I<$items> 必须是一个指向数组的引用。  

因此, 看上去比较顺眼的写法应该是： 


 sub check_required_items { 
  my $who   = shift; 
  my $items = shift; 


  my @required = qw(preserver sunscreen water_bottle jacket); 
  for my $item (@required) { 
    unless (grep $item eq $_, @$items) { # not found in list? 
      print "$who is missing $item. \n"; 
    } 
  } 
 } 

与前例惟一的区别就是去掉了大括号： I<@$items.>  

=head2 4. 5. 修改数组 

你已经看到了如何用一个指向数组的引用来解决大量拷贝带来的问题.现在我们来看看如何修改原始数组。  

对于每个遗忘的的装备, 我们把它放到另一个数组里, 要求乘客关注这些装备： 


 sub check_required_items { 
  my $who   = shift; 
  my $items = shift; 


  my @required = qw(preserver sunscreen water_bottle jacket); 
  my @missing = (  ); 


  for my $item (@required) { 
    unless (grep $item eq $_, @$items) { # not found in list? 
      print "$who is missing $item. \n"; 
      push @missing, $item; 
    } 
  } 


  if (@missing) { 
    print "Adding @missing to @$items for $who. \n"; 
    push @$items, @missing; 
  } 
 } 

注意我们另外增加了一个 I<@missing> 数组.如果我们在扫描数组的时候发现有遗忘的装备, 我们就把它放到 I<@missing> 数组里.在扫描结束后, 如果发现 I<@missing> 里有内容, 我们就把这个数组加在供应清单后面。  

关键就在于那个子例程的最后一行.我们把指向数组的引用 I<$items> 还原成数组, 访问还原后的数组, 并且把 I<@missing> 数组中的元素加进去。  

同样, I<@$items(> 或者其更一般的形式 I<:@{$items})> 在双引号内也可以工作.尽管我们可以在大括号里加任意空格, 但我们不能在@和后面跟着的字符间加上空格。  

=head2 4. 6. 数据结构嵌套 

在前例中, 我们的数组 I<@_> 有两个元素, 其中一个同样是个数组.如果一个引用所指向的数组中还包含着另外一个指向数组的引用会是什么情况？那就成了非常有用的所谓复杂数据结构。  

举个例子, 我们首先用个更大点儿的数据结构包含 I<skipper> , I<Gilligan> 和 I<Professor> 供应清单的整个列表。 


 my @skipper = qw(blue_shirt hat jacket preserver sunscreen); 
 my @skipper_with_name = ('Skipper', \@skipper); 
 my @professor = qw(sunscreen water_bottle slide_rule batteries radio); 
 my @professor_with_name = ('Professor', \@professor); 
 my @gilligan = qw(red_shirt hat lucky_socks water_bottle); 
 my @gilligan_with_name = ('Gilligan', \@gilligan); 

现在, I<@skipper_with_name> 有两个元素, 第二个元素就是指向数组的引用, 就是上例中我们传给子例程的那个.现在, 我们把它们组织起来： 


 my @all_with_names = ( 
  \@skipper_with_name,  
  \@professor_with_name,  
  \@gilligan_with_name,  
 ); 

注意, 现在我们的结构中有三个元素, 其中每个元素指向另外一个数组, 而那个数组又包含两个元素：名字和相名字相应的初始装备清单.具体的样子可以看图例 I<4-1:>  

图 I<4-1.> 数组 I<@all_with_name> 包含一个多层的数据结构, 包括字串和指向另一数组的引用。 

这样, I<$all_with_names[2]> 里放的是指向数组的引用, 内中存放的是 I<Gilligan> 的数据.如果将其还原, 像这样： I<@{$all_with_names[2]}> , 你就是得到一个有两个元素的数组： I<Gilligan> 和另一个数组引用。  

我们如何才能访问那个数组引用呢？用我们的老规矩： I<${$all_with_names[2]}[1].> 换句话说, 我们在一个表达式中像 I<$DUMMY[1]> 形式那样把 I<$all_with_names[2]> 还原成一个一平常的数组, 就是说用 I<{$all_with_names[2]}> 代替 I<DUMMY> 的位置。  

那我们如何用这个数据结构来调用现存的 I<check_required_items(> )? 下面的代码足够简单：  


 for my $person (@all_with_names) { 
   my $who = $$person[0]; 
   my $provisions_reference = $$person[1]; 
   check_required_items($who, $provisions_reference); 
 } 

这样对于以前写的子例程不需要做任何改变.随着循环进程, 控制变量 I<$person> 将会是 I<$all_with_names[0]> , I<$all_with_names[1]> 和 I<$all_with_names[2].> 当我们还原 I<$$person[0]> , 我们会得到 I<"Skipper> , I<""Professor> , "和 I<"Gilligan> , "相应的, I<$$persion[1]> 是各个乘客所对应的装备清单数组。  

当然, 我们可以把这个过程再简化, 因为整个还原数组与参数清单精确对应： 


 for my $person (@all_with_names) { 
   check_required_items(@$person); 
 } 

甚至于： 


 check_required_items(@$_) for @all_with_names; 

正如你们看到的那样, 不同的优化层次会导致代码明晰性的困惑.所以写代码的时候要考虑一下一个月后, 当你重读这些代码的时候你会如何理解.或者, 当你离开这个岗位后, 接替你的人是否会看懂这段代码。 

=head2 4. 7. 用箭头号简化嵌套数组引用 

我们再来看一下用大括号的还原过程.像先前的例子, 我们对 I<Gilligan> 的装备清单的数组引用是 I<${$all_with_names[2]}[1].> 那么, 我们现在要访问 I<Gilligan> 的第一个装备的话, 会怎么样呢？我们需要把这个引用再还原一下, 所以要加上另一层大括号： I<${${$all_with_names[2]}[1]}[0].> 这样的语法太麻烦了！我们不能简化一下吗？当然可以！ 

在任何写成 I<${DUMMY}[$y]> 样子的地方, 我们都可以用 I<DUMMY->[$y]> 这种形式代替.换句话说, 我们可以这样还原一个数组引用： 用定义一个带箭头的数组引用和一个方括号指定下标的形式表达数组里一个特定的元素。  

对于我们现在的例子来说, 如果我们要得到对 I<Gilligan> 数组的引用的话, 我们可以简单写成： I<$all_with_names[2]->[1]> , 而指明 I<Gilligan> 的第一个装备清单的写法是： I<$all_with_names[2]->[1]->[0].> 哇, 看上去真是好多了。  

如果你觉得还不够简洁的话？那我们还有条规则：如果箭头是在"类似于下标"中间的话, 那么箭头也可以省去 I<.$all_with_names[2]->[1]->[0]> 变成了 I<$all_with_names[2][1][0].> 现在样子看上去更简洁了。  

那为什么箭头必须在非下标符号间存在呢?好, 如果我们有一个指向数组 I<@all_with_names> 的引用： 


 my $root = \@all_with_names; 

现在我们如何时取得 I<Gilligan> 的第一个装备呢？ 


 $root -> [2] -> [1] -> [0] 

很简单, 用"去箭头"规则, 我们可以写成： 


 $root -> [2][1][0] 

然而, 第一个箭头不能舍去, 因为这会表示 I<root> 数组的第三个元素, 成了一个完全无关的数据结构.让我们再与它"全包装"的形式再做一个比较： 


 ${${${$root}[2]}[1]}[0] 

看来用箭头比较爽.不过, 注意, 没有快捷办法从一个数组引用中取出整个数组内容.比如, 我们要找出 I<Gilligan> 装备清单的话, 可以这样写： 


 @{$root->[2][1]} 

应该按下面的顺序来从里往外读： 


 Take $root.  

把它先还原成一个指向数组的引用, 取出那个数组中第三个元素（序号为2）  

用同样的方法取出那个数组第二个元素（序号为1）  

然后把整个数组还原出来。  

得, 最后一步不必要箭头快捷方式了。 

=head2 4. 8. 指向散列的引用 

就像我们可以取到一个指向一个数组的引用一样, 我们也可以用反斜杠取到一个指向散列的引用： 


 my %gilligan_info = ( 
  name     => 'Gilligan',  
  hat      => 'White',  
  shirt    => 'Red',  
  position => 'First Mate',  
 ); 
 my $hash_ref = \%gilligan_info; 

我们也能还原一个对散列的引用, 得到它原来的数据.其方法与还原一个数组引用相同.就是当作没有引用这回事一样, 在散列引用变量的名字外面再加一对花括号.比如, 我们要取散列中一个给定键的特定值, 我们像这样写： 


 my $name = $ gilligan_info { 'name' }; 
 my $name = $ { $hash_ref } { 'name' }; 

在上例中, 同样是花括号表达了两个不同的含意.第一对花括号表示还原一个引用, 而第二个花括号限定散列键。  

对整个散列操作, 其操作也类似： 


 my @keys = keys % gilligan_info; 
 my @keys = keys % { $hash_ref }; 

在某种环境下, 我们也可以像对数组引用那样, 用快捷方法不用复杂的花括号形式.比如说, 花括号里仅仅是简单的标量变量的话（就像到现在为止的例子展示的那样）, 我们可以把花括号拿掉： 


 my $name = $$hash_ref{'name'}; 
 my @keys = keys %$hash_ref; 

像数组引用一样, 当我们要访问一个特定的散列元素的话, 我们可以用箭头形式： 


 my $name = $hash_ref->{'name'}; 

因为在标量适合的地方, 散列引用也适合, 所以我们可以创建一个散列引用的数组。 


 my %gilligan_info = ( 
   name     => 'Gilligan',  
   hat      => 'White',  
   shirt    => 'Red',  
   position => 'First Mate',  
 ); 
 my %skipper_info = ( 
   name     => 'Skipper',  
   hat      => 'Black',  
   shirt    => 'Blue',  
   position => 'Captain',  
 ); 
 my @crew = (\%gilligan_info, \%skipper_info); 

所以啦, I<$crew[0]> 的内容是指向 I<Gilligan> 信息的一个散列的引用.我们可以通过以下任一种方法取得 I<Gilligan> 的名字。 


 ${ $crew[0] } { 'name' } 
 my $ref = $crew[0]; $$ref{'name'} 
 $crew[0]->{'name'} 
 $crew[0]{'name'} 

在最后一个例子中, 我们一样可以去掉"类似下标"间的箭头, 不管箭头是在数组方括号还是散列花括号中间。  

接下来, 我们打印一下船员的花名册： 


 my %gilligan_info = ( 
   name     => 'Gilligan',  
   hat      => 'White',  
   shirt    => 'Red',  
   position => 'First Mate',  
  ); 
  my %skipper_info = ( 
   name     => 'Skipper',  
   hat      => 'Black',  
   shirt    => 'Blue',  
   position => 'Captain',  
  ); 
  my @crew = (\%gilligan_info, \%skipper_info); 


  my $format = "%-15s %-7s %-7s %-15s\n"; 
  printf $format, qw(Name Shirt Hat Position); 
  for my $crewmember (@crew) { 
   printf $format,  
     $crewmember->{'name'},  
     $crewmember->{'shirt'},  
     $crewmember->{'hat'},  
     $crewmember->{'position'}; 
  } 

上例中最后部份看上去比较重复.我们可以用散列片断来简化写法.一样的, 如果散列的语法是这样的： 


 @ gilligan_info { qw(name position) } 

那么散列引用片断的写法看上去如下： 


 @ { $hash_ref } { qw(name position) } 

因为大括号里是简单的标量变量, 所以我们可以把第一个大括号去掉, 形如： 


 @ $hash_ref { qw(name position) } 

因而, 我们可以把最后的循环语句替换成： 


 for my $crewmember (@crew) { 
  printf $format, @$crewmember{qw(name shirt hat position)}; 
 } 

对于数组片断或散列片断没有快捷写法, 就像对整个数组或散列也没有快捷写法一样。  

如果打印一个散列引用, 会得到一个类似于 I<HASH(0x1a2b3c)> 一样的字串, 显示这个散列在内存中的用十六进制表示的地址.这个对终端用户来说没有多少用处.除非表示没有很好还原, 这个对程序员来说也没多大用处。  

=head2 4. 9. 习题 

在附录中"第四章的答案"中找答案  

=head2 4. 9. 1. 练习 1 I<[5> 分钟] 

下列表达式各表示什么不同的含义： 


 $ginger->[2][1] 
 ${$ginger[2]}[1] 
 $ginger->[2]->[1] 
 ${$ginger->[2]}[1] 

=head2 4. 9. 2. 练习 2 I<[30> 分钟] 

运用书中最后那个版本的 I<check_required_items> , 写一个子程序 I<check_items_for_all> , 把一个散列引用作为惟一参数.这个散列引用的键是在 I<Minnow> 船上的所有乘客, 其对应的值是他们各自想带上船的东西。  

比如, 这个散列引用可以是这样的： 


 my @gilligan  =. . . gilligan items. . . ; 
 my @skipper   =. . . skipper items. . . ; 
 my @professor =. . . professor items. . . ; 
 my %all = ( 
   Gilligan  => \@gilligan,  
   Skipper   => \@skipper,  
   Professor => \@professor,  
 ); 
 check_items_for_all(\%all); 

我们新建的那个子程序要调用 I<check_required_items> 来为散列中每个人更新其必需的装备清单。  

